let
	wait = (seconds as number, action as function) =>
		if (List.Count(List.Generate(() => DateTimeZone.LocalNow() + #duration(0, 0, 0, seconds), (x) => DateTimeZone.LocalNow() < x,  (x) => x)) = 0) then null else action(),
	Pause = wait(3, DateTime.LocalNow),
	Source = Pdf.Tables(File.Contents("D:\Data\Raw Data\강동구\가족정책과\2024.7.가족정책과+업무추진비.pdf"), [Implementation="1.3"]),
	SelectedTable = Table.SelectRows(Source, each [Kind] = "Table"),
	TableList = List.Generate(() => [x = 0, y = SelectedTable{x}[Data]], each [x] < Table.RowCount(SelectedTable), each [x = [x] + 1, y = SelectedTable{x}[Data]], each [y]),
	CombinedTable = Table.Combine(TableList),
	NullIndexDelTable = Table.RemoveMatchingRows(CombinedTable, {[Column1 = null], [Column1 = ""]}, "Column1"),
	FirstRow = Table.PositionOfAny(NullIndexDelTable, {[Column1 = "1"], [Column1 = 1]}, 0, "Column1"),
	countNull = (myList as list, offset as number) =>
		if offset < List.Count(myList) then
			if myList{offset} = null or myList{offset} = "" then
				@countNull(myList, offset + 1) + 1
			else
				@countNull(myList, offset + 1)
		else 0,
	deleteNullRows = (myTable as table, offset as number, end as number) =>
		if offset < end then
			if countNull(Record.FieldValues(myTable{offset}), 0) > 3 then
				@deleteNullRows(Table.RemoveRows(myTable, offset), offset + 1, end)
			else
				@deleteNullRows(myTable, offset + 1, end)
		else 
			myTable,
	NullDeletedTable = deleteNullRows(NullIndexDelTable, 0, FirstRow),
	PromotedHeaders = Table.PromoteHeaders(NullDeletedTable, [PromoteAllScalars=true]),
	CleanedHeader = Table.TransformColumnNames(PromotedHeaders, Text.Clean),
	ColumnList = Table.ColumnNames(CleanedHeader),
	SpaceErasedColumnList = List.Generate(() => [x = 0, y = Text.Remove(ColumnList{x}, " ")], each [x] < List.Count(ColumnList), each [x = [x] + 1, y = Text.Remove(ColumnList{x}, " ")], each [y] ),
	exchangeColumn = (colText as text) =>
		if Text.Contains(colText, "장소") or Text.Contains(colText, "가맹점") then "장소"
		else if Text.Contains(colText, "목적") or Text.Contains(colText, "내역") then "목적"
		else if Text.Contains(colText, "부서") then "부서"
		else if Text.Contains(colText, "방법") then "방법"
		else if Text.Contains(colText, "인원") then "인원"
		else if Text.Contains(colText, "액") then "금액"
		else if Text.Contains(colText, "번") then "번호"
		else if Text.Contains(colText, "일") then "날짜"
		else if Text.Contains(colText, "시") then "시간"
		else colText,
	NewColumnList = List.Generate(() => [x = 0, y = exchangeColumn(SpaceErasedColumnList{x})], each [x] < List.Count(SpaceErasedColumnList), each [x = [x] + 1, y = exchangeColumn(SpaceErasedColumnList{x})], each [y]),
	HeaderPairList = List.Generate(() => [x = 0, y = {ColumnList{x}, NewColumnList{x}}], each [x] < List.Count(NewColumnList), each [x = [x] + 1, y = {ColumnList{x}, NewColumnList{x}}], each [y]),
	RenamedTable = Table.RenameColumns(CleanedHeader, HeaderPairList),
	ColumnUnifiedTable = if List.Contains(NewColumnList, "부서") then RenamedTable else Table.AddColumn(RenamedTable, "부서", each "가족정책과", type text),
	extractNumber = (rowText) => if Type.Is(Value.Type(rowText), type text) then Text.Select(rowText, {"0".."9"}) else rowText,
	TransfromedTable = Table.TransformColumns(ColumnUnifiedTable,
			{
				{"번호", Number.From},
				{"인원", each extractNumber(_)},
				{"날짜", Text.From},
				{"시간", Text.From},
				{"금액", each extractNumber(_)},
				{"장소", Text.Clean}
			},
			Text.From,
			MissingField.UseNull
		),
	TypeTransfromedTable = Table.TransformColumnTypes(TransfromedTable,
			{
				{"번호", Int64.Type},
				{"인원", Int64.Type},
				{"날짜", type date},
				{"시간", type time},
				{"금액", Currency.Type}
			}
		)
in
	TypeTransfromedTable