"let" & Chr(13) & Chr(10) & _
chr(9) & "wait = (seconds as number, action as function) =>" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "if (List.Count(List.Generate(() => DateTimeZone.LocalNow() + #duration(0, 0, 0, seconds), (x) => DateTimeZone.LocalNow() < x,  (x) => x)) = 0) then null else action()," & Chr(13) & Chr(10) & _
chr(9) & "Pause = wait(3, DateTime.LocalNow)," & Chr(13) & Chr(10) & _
chr(9) & "Source = Pdf.Tables(File.Contents(""D:\Data\Raw Data\강동구\가족정책과\2024.7.가족정책과+업무추진비.pdf""), [Implementation=""1.3""])," & Chr(13) & Chr(10) & _
chr(9) & "SelectedTable = Table.SelectRows(Source, each [Kind] = ""Table"")," & Chr(13) & Chr(10) & _
chr(9) & "TableList = List.Generate(() => [x = 0, y = SelectedTable{x}[Data]], each [x] < Table.RowCount(SelectedTable), each [x = [x] + 1, y = SelectedTable{x}[Data]], each [y])," & Chr(13) & Chr(10) & _
chr(9) & "CombinedTable = Table.Combine(TableList)," & Chr(13) & Chr(10) & _
chr(9) & "NullIndexDelTable = Table.RemoveMatchingRows(CombinedTable, {[Column1 = null], [Column1 = """"]}, ""Column1"")," & Chr(13) & Chr(10) & _
chr(9) & "FirstRow = Table.PositionOfAny(NullIndexDelTable, {[Column1 = ""1""], [Column1 = 1]}, 0, ""Column1"")," & Chr(13) & Chr(10) & _
chr(9) & "countNull = (myList as list, offset as number) =>" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "if offset < List.Count(myList) then" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "if myList{offset} = null or myList{offset} = """" then" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "@countNull(myList, offset + 1) + 1" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "else" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "@countNull(myList, offset + 1)" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else 0," & Chr(13) & Chr(10) & _
chr(9) & "deleteNullRows = (myTable as table, offset as number, end as number) =>" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "if offset < end then" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "if countNull(Record.FieldValues(myTable{offset}), 0) > 3 then" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "@deleteNullRows(Table.RemoveRows(myTable, offset), offset, end - 1)" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "else" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "@deleteNullRows(myTable, offset + 1, end)" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else " & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "myTable," & Chr(13) & Chr(10) & _
chr(9) & "NullDeletedTable = deleteNullRows(NullIndexDelTable, 0, FirstRow)," & Chr(13) & Chr(10) & _
chr(9) & "PromotedHeaders = Table.PromoteHeaders(NullDeletedTable, [PromoteAllScalars=true])," & Chr(13) & Chr(10) & _
chr(9) & "CleanedHeader = Table.TransformColumnNames(PromotedHeaders, Text.Clean)," & Chr(13) & Chr(10) & _
chr(9) & "ColumnList = Table.ColumnNames(CleanedHeader)," & Chr(13) & Chr(10) & _
chr(9) & "SpaceErasedColumnList = List.Generate(() => [x = 0, y = Text.Remove(ColumnList{x}, "" "")], each [x] < List.Count(ColumnList), each [x = [x] + 1, y = Text.Remove(ColumnList{x}, "" "")], each [y] )," & Chr(13) & Chr(10) & _
chr(9) & "exchangeColumn = (colText as text) =>" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "if Text.Contains(colText, ""장소"") or Text.Contains(colText, ""가맹점"") then ""장소""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""목적"") or Text.Contains(colText, ""내역"") then ""목적""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""부서"") then ""부서""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""방법"") then ""방법""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""인원"") then ""인원""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""액"") then ""금액""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""번"") then ""번호""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""일"") then ""날짜""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else if Text.Contains(colText, ""시"") then ""시간""" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & "else colText," & Chr(13) & Chr(10) & _
chr(9) & "NewColumnList = List.Generate(() => [x = 0, y = exchangeColumn(SpaceErasedColumnList{x})], each [x] < List.Count(SpaceErasedColumnList), each [x = [x] + 1, y = exchangeColumn(SpaceErasedColumnList{x})], each [y])," & Chr(13) & Chr(10) & _
chr(9) & "HeaderPairList = List.Generate(() => [x = 0, y = {ColumnList{x}, NewColumnList{x}}], each [x] < List.Count(NewColumnList), each [x = [x] + 1, y = {ColumnList{x}, NewColumnList{x}}], each [y])," & Chr(13) & Chr(10) & _
chr(9) & "RenamedTable = Table.RenameColumns(CleanedHeader, HeaderPairList)," & Chr(13) & Chr(10) & _
chr(9) & "ColumnUnifiedTable = if List.Contains(NewColumnList, ""부서"") then RenamedTable else Table.AddColumn(RenamedTable, ""부서"", each ""가족정책과"", type text)," & Chr(13) & Chr(10) & _
chr(9) & "extractNumber = (rowText as text) => Text.Select(rowText, {""0""..""9""})," & Chr(13) & Chr(10) & _
chr(9) & "TransfromedTable = Table.TransformColumns(ColumnUnifiedTable," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "{" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""번호"", Number.FromText}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""인원"", each extractNumber(_)}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""날짜"", Text.From}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""시간"", Text.From}," & Chr(13) & Chr(10) &
chr(9) & chr(9) & chr(9) & chr(9) & "{""금액"", each extractNumber(_)}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""장소"", Text.Clean}" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "Text.From," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "MissingField.UseNull" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & ")," & Chr(13) & Chr(10) & _
chr(9) & "TypeTransfromedTable = Table.TransformColumnTypes(TransfromedTable," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "{" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""번호"", Int64.Type}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""인원"", Int64.Type}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""날짜"", type date}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""시간"", type time}," & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & chr(9) & "{""금액"", Currency.Type}" & Chr(13) & Chr(10) & _
chr(9) & chr(9) & chr(9) & "}" & Chr(13) & Chr(10) & _
chr(9) & Chr(9) & ")," & Chr(13) & Chr(10) & _
chr(9) & "ErrorCorrectedTable = Table.ReplaceErrorValues(TypeTransfromedTable, {{""날짜"", null}, {""시간"", null}})" & Chr(13) & Chr(10) & _
"in" & Chr(13) & Chr(10) & _
chr(9) & "ErrorCorrectedTable"